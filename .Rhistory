out_df <- rbind(out_df, row)
}
}
names(out_df) <- c("name1", "full2", "distance")
grab <- aggregate(distance ~ name1, data = out_df, FUN = min)
merge(out_df, grab)
source2
merge(out_df, grab)
out_df <- c()
for(x in source1$name) {
for(y in source2$full2) {
# row <- data.frame(x, y, adist(x, y, partial = TRUE, ignore.case = TRUE))
row <- data.frame(x, y, stringdist(x, y, method="osa"))
out_df <- rbind(out_df, row)
}
}
names(out_df) <- c("name1", "full2", "distance")
grab <- aggregate(distance ~ name1, data = out_df, FUN = min)
merge(out_df, grab)
out_df <- c()
for(x in source1$name) {
for(y in source2$full2) {
# row <- data.frame(x, y, adist(x, y, partial = TRUE, ignore.case = TRUE))
row <- data.frame(x, y, stringdist(x, y, method="qgram", q =1))
out_df <- rbind(out_df, row)
}
}
names(out_df) <- c("name1", "full2", "distance")
grab <- aggregate(distance ~ name1, data = out_df, FUN = min)
merge(out_df, grab)
out_df <- c()
for(x in source1$name) {
for(y in source2$full2) {
# row <- data.frame(x, y, adist(x, y, partial = TRUE, ignore.case = TRUE))
row <- data.frame(x, y, stringdist(x, y, method="cosine", q = 1))
out_df <- rbind(out_df, row)
}
}
names(out_df) <- c("name1", "full2", "distance")
grab <- aggregate(distance ~ name1, data = out_df, FUN = min)
merge(out_df, grab)
out_df <- c()
for(x in source1$name) {
for(y in source2$full2) {
# row <- data.frame(x, y, adist(x, y, partial = TRUE, ignore.case = TRUE))
row <- data.frame(x, y, stringdist(x, y, method="cosine", q = 2))
out_df <- rbind(out_df, row)
}
}
names(out_df) <- c("name1", "full2", "distance")
grab <- aggregate(distance ~ name1, data = out_df, FUN = min)
merge(out_df, grab)
out_df <- c()
for(x in source1$name) {
for(y in source2$full2) {
# row <- data.frame(x, y, adist(x, y, partial = TRUE, ignore.case = TRUE))
row <- data.frame(x, y, stringdist(x, y, method="cosine", q = 1))
out_df <- rbind(out_df, row)
}
}
names(out_df) <- c("name1", "full2", "distance")
grab <- aggregate(distance ~ name1, data = out_df, FUN = min)
merge(out_df, grab)
out_df <- c()
for(x in source1$name) {
for(y in source2$full2) {
# row <- data.frame(x, y, adist(x, y, partial = TRUE, ignore.case = TRUE))
# row <- data.frame(x, y, stringdist(x, y, method="cosine", q = 1))
row <- data.frame(x, y, stringdist(x, y, method="jaccard", q = 1))
out_df <- rbind(out_df, row)
}
}
names(out_df) <- c("name1", "full2", "distance")
grab <- aggregate(distance ~ name1, data = out_df, FUN = min)
merge(out_df, grab)
best <- merge(out_df, grab)
best
len(best$name1)
length(best$name1)
sapply(best$name1)
sapply(best$name1, length)
sapply(best$name1, nchar)
str(best)
sapply(as.character(best$name1), nchar)
best
sapply(as.character(best$name1), nchar) + sapply(as.character(best$full2), nchar)
merge(out_df, grab)
source1
source2
library(qdap)
name <- c("holiday inn", "geico", "zgf", "morton phillips")
address <- c("400 lafayette pl tupelo ms", "227 geico plaza chevy chase md",
"811 quincy st washington dc", "1911 1st st rockville md")
source1 <- data.frame(name, address)
name <- c("williams sonoma", "mamas bbq", "davis polk", "hop a long diner",
"joes crag shack", "mike lowry place", "holiday inn", "zummer")
name2 <- c(NA, NA, NA, NA, NA, NA, "hi express", "zummer gunsul frasca")
address <- c("2 reads way new castle de", "248 w 4th st newark de",
"1100 21st st nw washington dc", "1804 w 5th st wilmington de",
"1208 kenwood parkway holdridge nb", "4203 ocean drive miami fl",
"400 lafayette pl tupelo ms", "811 quincy st washington dc")
source2 <- data.frame(name, name2, address)
removeSPE <- function(x) gsub("[[:punct:]]", " ", x)
cleanup <- function(x){
x <- as.character(x) # convert to character
x <- tolower(x) # make all lowercase
x <- sapply(x, removeSPE) # remove special characters
x <- trimws(x) # remove extra white space
#x <- sapply(x, removeStopWords) # remove stopwords, defined above
#x <- trimws(x) # since stopwords have been removed, there is extra white space left, this removes it
x <- gsub("^. .$", "", x)
return(x)
}
source1$name <- cleanup(source1$name)
source2$name <- cleanup(source2$name)
source2$name2 <- cleanup(source2$name2)
source1$address <- cleanup(source1$address)
source2$address <- cleanup(source2$address)
source1$name <- cleanup(source1$name)
source2$name <- cleanup(source2$name)
source2$name2 <- cleanup(source2$name2)
dist.name<- adist(source1$name,source2$name, partial = TRUE, ignore.case = TRUE)
dist.name2 <- adist(source1$name, source2$name2, partial = TRUE, ignore.case = TRUE)
dist.address <- adist(source1$address, source2$address, partial = TRUE, ignore.case = TRUE)
min.name<-apply(dist.name, 2, min)
min.name2 <- apply(dist.name2, 2, min)
source2$full <- paste(source2$name , source2$name2)
source2$full <- gsub("\\s*NA\\s*", "", source2$full)
source2$full2 <- sapply(source2$full,
function(x) paste(unique(unlist(strsplit(x, " "))), collapse = " "))
match.s1.s2<-NULL
for(i in 1:nrow(dist.address))
{
s2.i<-match(min.name[i],dist.name[i,])
s1.i<-i
match.s1.s2<-
rbind(data.frame(s2.i=s2.i,s1.i=s1.i,s2name=source2[s2.i,]$name, s1name=source1[s1.i,]$name,
adist=min.name[i], s1.i.address = source1[s1.i,]$address,
s2.i.address = source2[s2.i,]$address),match.s1.s2)
}
match.s1.s2
library("stringdist")
out_df <- c()
for(x in source1$name) {
for(y in source2$full2) {
row <- data.frame(x, y, stringdist(x, y, method="cosine", q = 1))
out_df <- rbind(out_df, row)
}
}
names(out_df) <- c("name1", "full2", "distance")
library(qdap)
name <- c("holiday inn", "geico", "zgf", "morton phillips")
address <- c("400 lafayette pl tupelo ms", "227 geico plaza chevy chase md",
"811 quincy st washington dc", "1911 1st st rockville md")
source1 <- data.frame(name, address)
name <- c("williams sonoma", "mamas bbq", "davis polk", "hop a long diner",
"joes crag shack", "mike lowry place", "holiday inn", "zummer")
name2 <- c(NA, NA, NA, NA, NA, NA, "hi express", "zummer gunsul frasca")
address <- c("2 reads way new castle de", "248 w 4th st newark de",
"1100 21st st nw washington dc", "1804 w 5th st wilmington de",
"1208 kenwood parkway holdridge nb", "4203 ocean drive miami fl",
"400 lafayette pl tupelo ms", "811 quincy st washington dc")
source2 <- data.frame(name, name2, address)
removeSPE <- function(x) gsub("[[:punct:]]", " ", x)
cleanup <- function(x){
x <- as.character(x) # convert to character
x <- tolower(x) # make all lowercase
x <- sapply(x, removeSPE) # remove special characters
x <- trimws(x) # remove extra white space
#x <- sapply(x, removeStopWords) # remove stopwords, defined above
#x <- trimws(x) # since stopwords have been removed, there is extra white space left, this removes it
x <- gsub("^. .$", "", x)
return(x)
}
source1$name <- cleanup(source1$name)
source2$name <- cleanup(source2$name)
source2$name2 <- cleanup(source2$name2)
source1$address <- cleanup(source1$address)
source2$address <- cleanup(source2$address)
source1$name <- cleanup(source1$name)
source2$name <- cleanup(source2$name)
source2$name2 <- cleanup(source2$name2)
dist.name<- adist(source1$name,source2$name, partial = TRUE, ignore.case = TRUE)
dist.name2 <- adist(source1$name, source2$name2, partial = TRUE, ignore.case = TRUE)
dist.address <- adist(source1$address, source2$address, partial = TRUE, ignore.case = TRUE)
min.name<-apply(dist.name, 2, min)
min.name2 <- apply(dist.name2, 2, min)
# paste(unique(unlist(strsplit(source2$full[8], " "))), collapse = " ")
match.s1.s2<-NULL
for(i in 1:nrow(dist.address))
{
s2.i<-match(min.name[i],dist.name[i,])
s1.i<-i
match.s1.s2<-
rbind(data.frame(s2.i=s2.i,s1.i=s1.i,s2name=source2[s2.i,]$name, s1name=source1[s1.i,]$name,
adist=min.name[i], s1.i.address = source1[s1.i,]$address,
s2.i.address = source2[s2.i,]$address),match.s1.s2)
}
match.s1.s2
library("stringdist")
source2$full <- paste(source2$name , source2$name2)
source2$full <- gsub("\\s*NA\\s*", "", source2$full)
source2$full2 <- sapply(source2$full,
function(x) paste(unique(unlist(strsplit(x, " "))), collapse = " "))
out_df <- c()
for(x in source1$name) {
for(y in source2$full2) {
row <- data.frame(x, y, stringdist(x, y, method="cosine", q = 1))
out_df <- rbind(out_df, row)
}
}
library("stringdist")
out_df <- c()
for(x in source1$name) {
for(y in source2$full2) {
row <- data.frame(x, y, adist(x, y, partial = TRUE, ignore.case = TRUE))
# row <- data.frame(x, y, stringdist(x, y, method="cosine", q = 1))
out_df <- rbind(out_df, row)
}
}
out_df <- c()
for(x in source1$name) {
for(y in source2$full2) {
# row <- data.frame(x, y, adist(x, y, partial = TRUE, ignore.case = TRUE))
row <- data.frame(x, y, stringdist(x, y, method="cosine", q = 1))
out_df <- rbind(out_df, row)
}
}
source1
source2
library("stringdist")
out_df <- c()
for(x in source1$name) {
for(y in source2$full2) {
# row <- data.frame(x, y, adist(x, y, partial = TRUE, ignore.case = TRUE))
row <- data.frame(x, y, stringdist(x, y, method="cosine", q = 1))
out_df <- rbind(out_df, row)
}
}
name <- c("holiday inn", "geico", "zgf", "morton phillips")
address <- c("400 lafayette pl tupelo ms", "227 geico plaza chevy chase md",
"811 quincy st washington dc", "1911 1st st rockville md")
source1 <- data.frame(name, address)
name <- c("williams sonoma", "mamas bbq", "davis polk", "hop a long diner",
"joes crag shack", "mike lowry place", "holiday inn", "zummer")
name2 <- c(NA, NA, NA, NA, NA, NA, "hi express", "zummer gunsul frasca")
address <- c("2 reads way new castle de", "248 w 4th st newark de",
"1100 21st st nw washington dc", "1804 w 5th st wilmington de",
"1208 kenwood parkway holdridge nb", "4203 ocean drive miami fl",
"400 lafayette pl tupelo ms", "811 quincy st washington dc")
source2 <- data.frame(name, name2, address)
removeSPE <- function(x) gsub("[[:punct:]]", " ", x)
cleanup <- function(x){
x <- as.character(x) # convert to character
x <- tolower(x) # make all lowercase
x <- sapply(x, removeSPE) # remove special characters
x <- trimws(x) # remove extra white space
#x <- sapply(x, removeStopWords) # remove stopwords, defined above
#x <- trimws(x) # since stopwords have been removed, there is extra white space left, this removes it
x <- gsub("^. .$", "", x)
return(x)
}
source1$name <- cleanup(source1$name)
source2$name <- cleanup(source2$name)
source2$name2 <- cleanup(source2$name2)
source1$address <- cleanup(source1$address)
source2$address <- cleanup(source2$address)
source1$name <- cleanup(source1$name)
source2$name <- cleanup(source2$name)
source2$name2 <- cleanup(source2$name2)
dist.name<- adist(source1$name,source2$name, partial = TRUE, ignore.case = TRUE)
dist.name2 <- adist(source1$name, source2$name2, partial = TRUE, ignore.case = TRUE)
dist.address <- adist(source1$address, source2$address, partial = TRUE, ignore.case = TRUE)
min.name<-apply(dist.name, 2, min)
min.name2 <- apply(dist.name2, 2, min)
source2$full <- paste(source2$name , source2$name2)
source2$full <- gsub("\\s*NA\\s*", "", source2$full)
source2$full2 <- sapply(source2$full,
function(x) paste(unique(unlist(strsplit(x, " "))), collapse = " "))
match.s1.s2<-NULL
for(i in 1:nrow(dist.address))
{
s2.i<-match(min.name[i],dist.name[i,])
s1.i<-i
match.s1.s2<-
rbind(data.frame(s2.i=s2.i,s1.i=s1.i,s2name=source2[s2.i,]$name, s1name=source1[s1.i,]$name,
adist=min.name[i], s1.i.address = source1[s1.i,]$address,
s2.i.address = source2[s2.i,]$address),match.s1.s2)
}
match.s1.s2
library("stringdist")
out_df <- c()
for(x in source1$name) {
for(y in source2$full2) {
# row <- data.frame(x, y, adist(x, y, partial = TRUE, ignore.case = TRUE))
row <- data.frame(x, y, stringdist(x, y, method="cosine", q = 1))
out_df <- rbind(out_df, row)
}
}
?step
install.packages("ggplot2");
library(shiny)
runApp('shiny/shiny_tutorial_one.R')
runApp('shiny/shiny_tutorial_one.R')
ui <- fluidPage("Hello World",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
runApp('shiny/shiny_tutorial_one.R')
runApp('shiny/shiny_tutorial_one.R')
runApp('shiny/shiny_tutorial_one.R')
runApp('shiny/shiny_tutorial_one.R')
library(RJSONIO)
library(jsonlite)
library(jsonlite)
library(shiny)
library(data.table)
namera_housing_api <- "https://api.namara.io/v0/data_sets/02f229d2-1046-4f08-a0d8-7c8537ebf3c3/data/en-2?geometry_format=wkt&api_key=c5d6d1238ad63d9284e84367d14608f085b1a48d3be21ac2751a96d92a363d47&organization_id=57e79865ddb8da0037004cdc&project_id=5a4fac9570ba26000aa22f18"
library(data.table)
mydat <- fread(namera_housing_api)
mydat
mydat <- getURL(namera_housing_api)
library(RCurl)
mydat <- getURL(namera_housing_api)
mydat
fromJSON(mydat)
api_response <- getURL(namera_housing_api)
data <- fromJSON(api_response)
library(RQuantLib)
install.packages("RQuantLib")
library(RQuantLib)
install.packages("QuantLib")
install.packages("RQuantLib")
library(RQuantLib)
library(jsonlite)
library(RCurl)
library(shiny)
namera_housing_api <- "https://api.namara.io/v0/data_sets/02f229d2-1046-4f08-a0d8-7c8537ebf3c3/data/en-2?geometry_format=wkt&api_key=c5d6d1238ad63d9284e84367d14608f085b1a48d3be21ac2751a96d92a363d47&organization_id=57e79865ddb8da0037004cdc&project_id=5a4fac9570ba26000aa22f18"
api_response <- getURL(namera_housing_api)
data <- fromJSON(api_response)
head(RQuantLib)
head(data)
table(data$index)
table(data$geo)
table(data$geographical_classification)
library(jsonlite)
library(RCurl)
library(shiny)
namera_housing_api <- "https://api.namara.io/v0/data_sets/02f229d2-1046-4f08-a0d8-7c8537ebf3c3/data/en-2?geometry_format=wkt&api_key=c5d6d1238ad63d9284e84367d14608f085b1a48d3be21ac2751a96d92a363d47&organization_id=57e79865ddb8da0037004cdc&project_id=5a4fac9570ba26000aa22f18"
api_response <- getURL(namera_housing_api)
data <- fromJSON(api_response)
head(data)
tail(data)
namera_housing_api2 <- "https://api.namara.io/v0/data_sets/02f229d2-1046-4f08-a0d8-7c8537ebf3c3/data/en-2?api_key=da0c188d2718f5c292a43e63996aac2652676cbc20c9b0b6b7bafd002739d45f"
api_response <- getURL(namera_housing_api2)
data <- fromJSON(api_response)
head(data)
tail(data)
namera_housing_api2 <- "https://api.namara.io/v0/data_sets/02f229d2-1046-4f08-a0d8-7c8537ebf3c3/data/en-2?api_key=da0c188d2718f5c292a43e63996aac2652676cbc20c9b0b6b7bafd002739d45f"
api_response <- getURL(namera_housing_api2)
data <- fromJSON(api_response)
head(data )
tail(data)
data <- read.csv("STATCAN_NEW_HOUSING_PRICE_INDEXES_CANSIM_327_0046.csv")
getwd()
setwd("/Users/aidangawronski/shiny/")
data <- read.csv("STATCAN_NEW_HOUSING_PRICE_INDEXES_CANSIM_327_0046.csv")
library(jsonlite)
library(RCurl)
library(shiny)
namera_housing_api <- "https://api.namara.io/v0/data_sets/02f229d2-1046-4f08-a0d8-7c8537ebf3c3/data/en-2?api_key=da0c188d2718f5c292a43e63996aac2652676cbc20c9b0b6b7bafd002739d45f"
api_response <- getURL(namera_housing_api)
data <- read.csv("STATCAN_NEW_HOUSING_PRICE_INDEXES_CANSIM_327_0046.csv")
seq(0, 100000, 250)
offsets <- seq(0, 100000, 250)
offsets
for i in offsets:
print(i)
for (i in offsets) {
print(i)
}
namera_housing_api <- "https://api.namara.io/v0/data_sets/02f229d2-1046-4f08-a0d8-7c8537ebf3c3/data/en-2?api_key=da0c188d2718f5c292a43e63996aac2652676cbc20c9b0b6b7bafd002739d45f"
api_response <- getURL(namera_housing_api)
type(api_response)
class(api_response)
api_response
out_list <- c()
for (i in offsets) {
print(i)
api_response <- getURL(namera_housing_api)
out_list <- c(out_list, api_response)
}
offsets
setwd("/Users/aidangawronski/shiny/")
library(jsonlite)
library(RCurl)
library(shiny)
data <- read.csv("STATCAN_NEW_HOUSING_PRICE_INDEXES_CANSIM_327_0046.csv")
head(data)
table(data$GEO)
str(data)
data <- read.csv("STATCAN_NEW_HOUSING_PRICE_INDEXES_CANSIM_327_0046.csv", stringsAsFactors = F)
str(data)
head(data)
data$Ref_Date[1]
gsub("[\]", "-", data$Ref_Date[1])
gsub("[\\]", "-", data$Ref_Date[1])
gsub("[/]", "-", data$Ref_Date[1])
paste0(gsub("[/]", "-", data$Ref_Date[1]), "-0")
as.Date(paste0(gsub("[/]", "-", data$Ref_Date[1]), "-01"))
data$date <- as.Date(paste0(gsub("[/]", "-", data$Ref_Date), "-01"))
head(data)
min(data$Value)
str(data)
head(data)
data$Value <- as.numeric(data$Value)
head(data)
head(data[is.na(data)])
head(data[is.na(data),])
dim(data[is.na(data),])
data[is.na(data),]
data <- read.csv("STATCAN_NEW_HOUSING_PRICE_INDEXES_CANSIM_327_0046.csv", stringsAsFactors = F)
data$date <- as.Date(paste0(gsub("[/]", "-", data$Ref_Date), "-01"))
apply(is.na(data), 2, sum)
min(data$Value)
data[data$Value == "..",:]
data[data$Value == "..",]
data <- data[data$Value != "..",]
min(data$Value)
max(data$Value)
data <- data[data$Value != "x",]
min(data$Value)
max(data$Value)
data$Value <- as.numeric(data$Value)
min(data$Value)
max(data$Value)
runApp('shiny_tutorial_one.R')
runApp('shiny_app_1')
getwd()
setwd("/Users/aidangawronski/shiny/shiny_app_1")
runApp()
install.packages('rsconnect')
rsconnect::setAccountInfo(name='agawronski',
token='D1F4D009ECC012EA4B0A665FF7EDC3A7',
secret='<SECRET>')
library("rsconnect")
rsconnect::setAccountInfo(name='agawronski',
token='D1F4D009ECC012EA4B0A665FF7EDC3A7',
secret='<SECRET>')
rsconnect::setAccountInfo(name='agawronski',
token='D1F4D009ECC012EA4B0A665FF7EDC3A7',
secret='<SECRET>')
rsconnect::setAccountInfo(name='agawronski',
token='D1F4D009ECC012EA4B0A665FF7EDC3A7',
secret='Odq519j5Agna5pFONvKieQcC16y/oPZXFtwsIPnB')
library(rsconnect)
rsconnect::deployApp('/Users/aidangawronski/shiny/shiny_app_1')
deployApp()
deployApp()
library(jsonlite)
library(RCurl)
library(shiny)
data <- read.csv("STATCAN_NEW_HOUSING_PRICE_INDEXES_CANSIM_327_0046.csv", stringsAsFactors = F)
data$date <- as.Date(paste0(gsub("[/]", "-", data$Ref_Date), "-01"))
data <- data[data$Value != "..",]
data <- data[data$Value != "x",]
data$Value <- as.numeric(data$Value)
min(data$Value)
max(data$Value)
ui <- fluidPage(
"Hello World",
sliderInput(inputId = "num",
label = "Choose a number",
value = 25, min = 1, max = 100),
plotOutput("hist")
)
server <- function(input, output) {
output$hist <- renderPlot({hist(data$Value, input$num)})
}
shinyApp(ui = ui, server = server)
appDeploy()
library(rsconnect)
deployApp()
library(rsconnect)
deployApp()
runApp()
library(rsconnect)
deployApp()
rsconnect::setAccountInfo(name='agawronski',
token='D1F4D009ECC012EA4B0A665FF7EDC3A7',
secret='Odq519j5Agna5pFONvKieQcC16y/oPZXFtwsIPnB')
deployApp()
library(rsconnect)
rsconnect::setAccountInfo(name='agawronski',
token='D1F4D009ECC012EA4B0A665FF7EDC3A7',
secret='Odq519j5Agna5pFONvKieQcC16y/oPZXFtwsIPnB')
rsconnect::deployApp('/Users/aidangawronski/shiny/canadian_housing_index/')
rsconnect::deployApp('/Users/aidangawronski/shiny/canadian_housing_index/app.R')
runApp()
setwd("/Users/aidangawronski/shiny/canadian_housing_index")
shiny::runApp()
rsconnect::setAccountInfo(name='agawronski',
token='D1F4D009ECC012EA4B0A665FF7EDC3A7',
secret='Odq519j5Agna5pFONvKieQcC16y/oPZXFtwsIPnB')
library(rsconnect)
library(rsconnect)
rsconnect::deployApp('/Users/aidangawronski/shiny/canadian_housing_index/')
deployApp()
deployApp('canadian_housing_index')
rsconnect::deployApp('/Users/aidangawronski/shiny/canadian_housing_index')
